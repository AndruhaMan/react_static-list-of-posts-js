{"version":3,"sources":["components/UserInfo/UserInfo.jsx","components/CommentInfo/CommentInfo.jsx","components/CommentList/CommentList.jsx","components/PostInfo/PostInfo.jsx","components/PostList/PostList.jsx","App.jsx","index.jsx"],"names":["UserInfo","user","email","name","className","href","CommentInfo","comment","body","CommentList","comments","length","map","id","PostInfo","post","title","PostList","posts","getCommentsById","commentsFromServer","filter","postId","postsFromServer","userId","usersFromServer","find","App","ReactDOM","render","document","getElementById"],"mappings":"w38IAGaA,EAAW,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAEvBC,EAEED,EAFFC,MACAC,EACEF,EADFE,KAGF,OACE,mBAAGC,UAAU,WAAWC,KAAMH,EAAK,iBAAaA,GAAU,IAA1D,SACGC,KCRMG,G,MAAc,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAE1BJ,EAGEI,EAHFJ,KACAD,EAEEK,EAFFL,MAFF,EAIIK,EADFC,YAHF,MAGS,GAHT,EAMA,OACE,sBAAKJ,UAAU,cAAf,UACE,sBAAKA,UAAU,qBAAf,UACE,wBAAQA,UAAU,oBAAlB,SAAuCD,GAAQ,KAE9C,OACAD,EAEG,mBACEE,UAAU,qBACVC,KAAMH,EAAK,iBAAaA,GAAU,IAFpC,SAIGA,IAIH,oDAON,qBAAKE,UAAU,oBAAf,SACGI,SC9BIC,G,MAAc,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACL,IAApBA,EAASC,OAEL,oBAAIP,UAAU,cAAd,SACGM,EAASE,KAAI,SAAAL,GAAO,OACnB,cAAC,EAAD,CAAaA,QAASA,GAAcA,EAAQM,SAKhD,mCACE,mBACET,UAAU,2BACV,UAAQ,oBAFV,iCCVKU,G,MAAW,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAEvBC,EAIED,EAJFC,MACAf,EAGEc,EAHFd,KACAO,EAEEO,EAFFP,KACAE,EACEK,EADFL,SAGF,OACE,sBAAKN,UAAU,WAAf,UACE,sBAAKA,UAAU,mBAAf,UACE,oBAAIA,UAAU,kBAAd,SAAiCY,IAEhCf,GACC,4BACE,cAAC,EAAD,CAAUA,KAAMA,SAKtB,mBAAGG,UAAU,iBAAb,SACGI,IAGH,cAAC,EAAD,CAAaE,SAAUA,SCzBhBO,G,MAAW,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACtB,oBAAId,UAAU,WAAd,SACGc,EAAMN,KAAI,SAAAG,GAAI,OACb,cAAC,EAAD,CAAUA,KAAMA,GAAWA,EAAKF,WCEhCM,EAAkB,SAAAN,GAAE,OACxBO,EAAmBC,QAAO,SAAAd,GAAO,OAAIA,EAAQe,SAAWT,MAAO,MAG3DK,EAAQK,EAAgBX,KAAI,SAAAG,GAAI,kCACjCA,GADiC,IAEpCd,MAPkBY,EAOAE,EAAKS,OAPCC,EAAgBC,MAAK,SAAAzB,GAAI,OAAIA,EAAKY,KAAOA,MAAO,MAQxEH,SAAUS,EAAgBJ,EAAKF,MARb,IAAAA,KAWPc,EAAM,kBACjB,0BAASvB,UAAU,MAAnB,UACE,oBAAIA,UAAU,aAAd,kCAEA,cAAC,EAAD,CAAUc,MAAOA,QCnBrBU,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.73df6f7f.chunk.js","sourcesContent":["import { PropTypes } from 'prop-types';\nimport './UserInfo.scss';\n\nexport const UserInfo = ({ user }) => {\n  const {\n    email,\n    name,\n  } = user;\n\n  return (\n    <a className=\"UserInfo\" href={email ? `mailto:${email}` : '#'}>\n      {name}\n    </a>\n  );\n};\n\nUserInfo.propTypes = {\n  user: PropTypes.oneOfType([PropTypes.object]).isRequired,\n};\n","import './CommentInfo.scss';\nimport { PropTypes } from 'prop-types';\n\nexport const CommentInfo = ({ comment }) => {\n  const {\n    name,\n    email,\n    body = '',\n  } = comment;\n\n  return (\n    <div className=\"CommentInfo\">\n      <div className=\"CommentInfo__title\">\n        <strong className=\"CommentInfo__name\">{name || ''}</strong>\n\n        {' by '}\n        {email\n          ? (\n            <a\n              className=\"CommentInfo__email\"\n              href={email ? `mailto:${email}` : '#'}\n            >\n              {email}\n            </a>\n          )\n          : (\n            <>\n              Anonymous\n            </>\n          )\n        }\n      </div>\n\n      <div className=\"CommentInfo__body\">\n        {body}\n      </div>\n    </div>\n  );\n};\n\nCommentInfo.propTypes = {\n  comment: PropTypes.oneOfType([PropTypes.object]).isRequired,\n};\n","import { PropTypes } from 'prop-types';\nimport { CommentInfo } from '../CommentInfo';\nimport './CommentList.scss';\n\nexport const CommentList = ({ comments }) => (\n  comments.length !== 0\n    ? (\n      <ul className=\"CommentList\">\n        {comments.map(comment => (\n          <CommentInfo comment={comment} key={comment.id} />\n        ))}\n      </ul>\n    )\n    : (\n      <>\n        <p\n          className=\"CommentList__no-comments\"\n          data-cy=\"NoCommentsMessage\"\n        >\n          No comments yet\n        </p>\n      </>\n    )\n);\n\nCommentList.propTypes = {\n  comments: PropTypes.oneOfType([PropTypes.array]).isRequired,\n};\n","import { PropTypes } from 'prop-types';\nimport { UserInfo } from '../UserInfo';\nimport { CommentList } from '../CommentList';\nimport './PostInfo.scss';\n\nexport const PostInfo = ({ post }) => {\n  const {\n    title,\n    user,\n    body,\n    comments,\n  } = post;\n\n  return (\n    <div className=\"PostInfo\">\n      <div className=\"PostInfo__header\">\n        <h3 className=\"PostInfo__title\">{title}</h3>\n\n        {user && (\n          <p>\n            <UserInfo user={user} />\n          </p>\n        )}\n      </div>\n\n      <p className=\"PostInfo__body\">\n        {body}\n      </p>\n\n      <CommentList comments={comments} />\n\n    </div>\n  );\n};\n\nPostInfo.propTypes = {\n  post: PropTypes.oneOfType([PropTypes.object]).isRequired,\n};\n","import { PropTypes } from 'prop-types';\nimport { PostInfo } from '../PostInfo';\nimport './PostList.scss';\n\nexport const PostList = ({ posts }) => (\n  <ul className=\"PostList\">\n    {posts.map(post => (\n      <PostInfo post={post} key={post.id} />\n    ))}\n  </ul>\n);\n\nPostList.propTypes = {\n  posts: PropTypes.oneOfType([PropTypes.array]).isRequired,\n};\n","import './App.scss';\n\nimport postsFromServer from './api/posts.json';\nimport commentsFromServer from './api/comments.json';\nimport usersFromServer from './api/users.json';\n\nimport { PostList } from './components/PostList';\n\nconst getUserById = id => usersFromServer.find(user => user.id === id) || null;\nconst getCommentsById = id => (\n  commentsFromServer.filter(comment => comment.postId === id) || null\n);\n\nconst posts = postsFromServer.map(post => ({\n  ...post,\n  user: getUserById(post.userId),\n  comments: getCommentsById(post.id),\n}));\n\nexport const App = () => (\n  <section className=\"App\">\n    <h1 className=\"App__title\">Static list of posts</h1>\n\n    <PostList posts={posts} />\n  </section>\n);\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}